{"version":3,"sources":["cookie.js","Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["getCookie","name","parts","concat","document","cookie","split","length","decodeURIComponent","pop","shift","console","log","Esc","styled","span","_templateObject","Modal","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Container","div","_templateObject2","width","height","open","styles","react_default","a","createElement","onClick","close","className","children","React","Component","getId","chars","Array","fill","map","_","xs","Math","floor","random","join","getDeviceId","CodeButton","button","App_templateObject","chosenCodes","includes","code","downloadUnitCodesFromDevice","comp","deviceId","columns","data","CSVHead","reduce","soFar","column","slice","CSVBody","row","trim","csv","blob","Blob","type","dataURI","URL","window","webkitURL","downloadURI","createObjectURL","link","setAttribute","body","appendChild","click","removeChild","handleCSVDownload","R","x","unit","codes","createdAt","reverse","formatData","allUnitCodes","filter","setState","showModal","App","value","days","expires","date","Date","setTime","getTime","toGMTString","makeCookieString","mmc","md","bd","mss","dss","lrp","brp","rrp","bp","mlrp","mbrp","mrrp","mbp","tv","dog","b","l","nk","knw","s","min","unitName","unitCodes","_this2","placeholder","style","padding","onChange","evt","target","addUnitName","keys","k","i","key","oldState","backgroundColor","fetch","method","JSON","stringify","query","headers","Content-Type","then","r","json","toConsumableArray","catch","error","addCodes","id","listStyleType","Modal_Modal","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2699e165.chunk.js","sourcesContent":["import { pipe } from 'ramda'\nexport function getDomain(w) {\n  const url = w.location.origin\n  if (url.includes('localhost')) return 'localhost'\n\n\treturn  pipe(\n        x => x.split('.')\n      , xs => xs.slice(-2)\n      , xs => xs.join('.')\n      , x => `.${x}`,\n    )(url)\n}\nfunction makeCookieString(name, value, days) {\n  let expires = ''\n  if (days) {\n    const date = new Date()\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))\n    expires = `; expires=${date.toGMTString()}`\n  }\n  return `${name}=${value}${expires};domain=cotterjd.github.io;path=/`\n}\nfunction getCookie(name) {\n  const value = `; ${document.cookie}`\n  const parts = value.split(`; ${name}=`)\n  if (parts.length === 2) {\n return (\n      decodeURIComponent(\n        parts\n          .pop()\n          .split(';')\n          .shift(),\n      ) || ''\n    )\n}\n  return ''\n}\nfunction deleteCookieString(name) {\n  return `${name}=; path=/; domain=${getDomain(window)}; expires=Thu, 01 Jan 1970 00:00:01 GMT;`\n}\n\nexport { makeCookieString, getCookie, deleteCookieString }\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst\n  log = console.log // eslint-disable-line\n\n, Esc = styled.span`\n    position: absolute;\n    right: 10px;\n    top: 5px;\n    font-size: 24px;\n    opacity: 0.5;\n  `\n; // eslint-disable-line semi\n\n// NOT IN USE. CONSIDER PURGING\nexport default class Modal extends React.Component {\n  constructor(props, context) {\n    super(props, context)\n    this.state = {\n    }\n  }\n  render() {\n    const { props } = this\n    , Container = styled.div`\n        width: ${props.width || 'auto'};\n        height: ${props.height || 'auto'};\n        box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.1);\n        background-color: #ffffff;\n        top: 0;\n        left: 0;\n\n        overflow-y: scroll;\n        padding: 30px;\n        display: ${props => props.open ? 'block' : 'none'};\n        z-index: 3;\n        position: fixed;\n        ${props.styles}\n      `\n    ; // eslint-disable-line semi\n    return (\n      <Container open={props.open}>\n        <Esc\n          onClick={props.close}\n          className=\"clickable\"\n        >&#x2715;</Esc>\n        {props.children}\n      </Container>\n    )\n  }\n}\n\nModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  height: PropTypes.string,\n  width: PropTypes.string,\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport * as R from 'ramda'\nimport { makeCookieString, getCookie } from './cookie'\nimport Modal from './Modal'\n\nconst log = console.log // eslint-disable-line no-unused-vars\n, chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789'\n, getRandomIndex = (xs) => Math.floor(Math.random() * ((xs.length - 1) + 1))\n, getId = chars => Array(6).fill(null).map((_) => chars[getRandomIndex(chars)]).join('')\n, getDeviceId = () => getId(chars)\n\n, addCode = (comp, code) => {\n    comp.setState((oldState, props) => ({\n      chosenCodes: oldState.chosenCodes.includes(code) ? oldState.chosenCodes.filter(x => x !== code) : oldState.chosenCodes.concat(code)\n    }))\n  }\n, addUnitName = (comp, evt) => comp.setState({unitName: evt.target.value})\n, addCodes = comp => {\n    if (!!comp.state.unitName && !!comp.state.chosenCodes.length) {\n      return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n        method: 'POST',\n        body: JSON.stringify({\n          query: `\n            mutation {\n              createUnitCode(data: {\n                deviceId: \"${comp.state.deviceId}\"\n                unit: \"${comp.state.unitName}\"\n                codes: \"${comp.state.chosenCodes.join(', ')}\"\n              }) {\n                id\n              }\n            }\n          `\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      .then(r => r.json())\n      .then(() => {\n         comp.setState((oldState) => ({\n           unitCodes: [...oldState.unitCodes, [oldState.unitName, oldState.chosenCodes.join(', ')]],\n           chosenCodes: [],\n           unitName: '',\n         }))\n         }\n      )\n      .catch(console.error)\n    }\n\n  }\n, CodeButton = styled.button`\n    background-color: ${props => props.state.chosenCodes.includes(props.code) ? 'green' : 'none'};\n    color: ${props => props.state.chosenCodes.includes(props.code) ? 'white' : 'none'};\n    width: 100%;\n    padding: 10px;\n  `\n\n, handleCSVDownload = (columns, data) => {\n    const CSVHead = `${columns.reduce((soFar, column) => `${soFar}\"${column}\",`, '').slice(0, -1)}\\r\\n`\n    const CSVBody = data.reduce((soFar, row) => `${soFar}\"${row.join('\",\"')}\"\\r\\n`, []).trim()\n\n    /* taken from react-csv */\n    const csv = `${CSVHead}${CSVBody}`\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const dataURI = `data:text/csv;charset=utf-8,${csv}`\n\n    const URL = window.URL || window.webkitURL\n    const downloadURI = typeof URL.createObjectURL === 'undefined' ? dataURI : URL.createObjectURL(blob)\n\n    const link = document.createElement('a')\n    link.setAttribute('href', downloadURI)\n    link.setAttribute('download', 'tableDownload.csv')\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n  }\n, formatData = data => R.sortBy(R.props('createdAt'), data).map(x => [ x.unit, x.codes, x.createdAt, x.deviceId ]).reverse()\n, getUnitCodesAndDownload = (comp) => {\n    return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n      method: 'POST',\n      body: JSON.stringify({\n        query: `\n          query {\n            unitCodes {\n              unit\n              codes\n              createdAt\n              deviceId\n            }\n          }\n        `\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(r => r.json())\n    .then(r => {\n      comp.setState({allUnitCodes: r.data.unitCodes, showModal: true})\n    })\n    .catch(console.error)\n  }\n, downloadUnitCodesFromDevice = (comp, deviceId) => {\n    const deviceUnitCodes = comp.state.allUnitCodes.filter(x => x.deviceId === deviceId)\n    const data = formatData(deviceUnitCodes)\n    handleCSVDownload(['unit', 'codes', 'created date', 'device ID'], data)\n    comp.setState({showModal: false})\n  }\n;\nclass App extends Component {\n  constructor() {\n    super()\n    const deviceId = getCookie('deviceId')\n    if (!deviceId) {\n      document.cookie=makeCookieString('deviceId', getDeviceId(), 3650)\n    }\n    this.state = {\n      codes: {\n        mmc: 'Missing Chimney Cap'\n      , md: 'Missing Damper'\n      , bd: 'Broken Damper'\n      , mss: 'Missing Spark Screen'\n      , dss: 'amaged Spark Screen'\n      , lrp: 'damaged Left Refractory Panel'\n      , brp: 'damaged Back Refractory Panel'\n      , rrp: 'damaged Right Refractory Panel'\n      , bp: 'damaged Base Panel'\n      , mlrp: 'Missing Left Refractory Panel'\n      , mbrp: 'Missing Back Refractory Panel'\n      , mrrp: 'Missing Right Refractory Panel'\n      , mbp: 'Missing Base Panel'\n      , tv: 'TV'\n      , dog: 'DOG'\n      , b: 'Blocked'\n      , l: 'Locked from the inside'\n      , nk: 'No Key'\n      , knw: 'Key Not Work'\n      , s: 'Skip per mgmt'\n      , min: 'Minor'\n      },\n      chosenCodes: [],\n      unitName: '',\n      unitCodes: [],\n      allUnitCodes: [],\n      deviceId: getCookie('deviceId'),\n      showModal: false,\n    }\n  }\n  render() {\n    const { state } = this\n\n    return (\n      <div>\n        <input name=\"unit\" placeholder=\"Unit\" style={{width: '100%', padding: '20px'}} value={state.unitName} onChange={evt => addUnitName(this, evt)} type=\"text\" />\n        {\n          Object.keys(state.codes).map((k, i) =>\n            <CodeButton\n              state={state}\n              code={k}\n              key={k}\n              onClick={evt => addCode(this, k)}\n            >\n              {state.codes[k]}\n            </CodeButton>)\n        }\n        <button style={{\n          width: '100%',\n          padding: '15px',\n          backgroundColor: '#74fff8'\n        }} onClick={evt => addCodes(this)}>Add Codes</button>\n        <ul id=\"report\" style={{\n          listStyleType: 'none'\n        }}>\n        {\n          state.unitCodes.map((x, i) => <li key={i}>{x}</li>)\n        }\n        </ul>\n        <button style={{\n          padding: '10px',\n        }} onClick={evt => getUnitCodesAndDownload(this)}>Download Report</button>\n        <Modal\n          open={state.showModal}\n          close={evt => this.setState({showModal: false})}\n        >\n          <h4>Which device to you want to download codes from</h4>\n          {\n            Object.keys(R.groupBy(R.prop('deviceId'), this.state.allUnitCodes))\n              .map(x => <button key={x} onClick={evt => downloadUnitCodesFromDevice(this, x)}>{`Device ${x}`}</button>)\n          }\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}