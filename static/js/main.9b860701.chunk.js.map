{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["console","log","CodeButton","styled","button","_templateObject","props","state","chosenCodes","includes","code","App","codes","mmc","md","bd","mss","dss","lrp","brp","rrp","bp","mlrp","mbrp","mrrp","mbp","tv","dog","b","l","nk","knw","s","min","unitName","unitCodes","_this2","this","react_default","a","createElement","htmlFor","name","value","onChange","evt","comp","setState","target","addUnitName","type","Object","keys","map","k","i","key","onClick","oldState","filter","x","concat","style","width","padding","join","id","listStyleType","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wXAIYA,QAAQC,IAApB,IAcEC,EAAaC,IAAOC,OAAVC,IACY,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,YAAYC,SAASH,EAAMI,MAAQ,QAAU,SAkE3EC,6MA9DbJ,MAAQ,CACNK,MAAO,CACLC,IAAK,sBACLC,GAAI,iBACJC,GAAI,gBACJC,IAAK,uBACLC,IAAK,sBACLC,IAAK,gCACLC,IAAK,gCACLC,IAAK,iCACLC,GAAI,qBACJC,KAAM,gCACNC,KAAM,gCACNC,KAAM,iCACNC,IAAK,qBACLC,GAAI,KACJC,IAAK,MACLC,EAAG,UACHC,EAAG,yBACHC,GAAI,SACJC,IAAK,eACLC,EAAG,gBACHC,IAAK,SAEPzB,YAAa,GACb0B,SAAU,GACVC,UAAW,4EAEJ,IAAAC,EAAAC,KACC9B,EAAU8B,KAAV9B,MACR,OACE+B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,QAAQ,QAAf,QACAH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,MAAOpC,EAAM2B,SAAUU,SAAU,SAAAC,GAAG,OA9C/C,SAACC,EAAMD,GAAP,OAAeC,EAAKC,SAAS,CAACb,SAAUW,EAAIG,OAAOL,QA8CAM,CAAYb,EAAMS,IAAMK,KAAK,SAEtFC,OAAOC,KAAK7C,EAAMK,OAAOyC,IAAI,SAACC,EAAGC,GAAJ,OAC3BjB,EAAAC,EAAAC,cAACtC,EAAD,CACEK,MAAOA,EACPG,KAAM4C,EACNE,IAAKF,EACLG,QAAS,SAAAZ,GAAG,OA1DPnC,EA0DyB4C,OAANlB,EAzD7BW,SAAS,SAACW,EAAUpD,GAAX,MAAsB,CAClCE,YAAakD,EAASlD,YAAYC,SAASC,GAAQgD,EAASlD,YAAYmD,OAAO,SAAAC,GAAC,OAAIA,IAAMlD,IAAQgD,EAASlD,YAAYqD,OAAOnD,MAFxH,IAAOA,IA4DJH,EAAMK,MAAM0C,MAGnBhB,EAAAC,EAAAC,cAAA,UAAQsB,MAAO,CACbC,MAAO,OACPC,QAAS,QACRP,QAAS,SAAAZ,GAAgBT,EA3D3BW,SAAS,SAACW,GAAD,MAAe,CAC3BvB,UAAWuB,EAASvB,UAAU0B,OAAnB,GAAAA,OAA6BH,EAASxB,SAAtC,KAAA2B,OAAkDH,EAASlD,YAAYyD,KAAK,QACvFzD,YAAa,GACb0B,SAAU,QAqDR,aAIAI,EAAAC,EAAAC,cAAA,MAAI0B,GAAG,SAASJ,MAAO,CACrBK,cAAe,SAGf5D,EAAM4B,UAAUkB,IAAI,SAACO,EAAGL,GAAJ,OAAUjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,GAAIK,cAtDnCQ,aCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b860701.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\n\nconst log = console.log // eslint-disable-line no-unused-vars\n, addCode = (comp, code) => {\n    comp.setState((oldState, props) => ({\n      chosenCodes: oldState.chosenCodes.includes(code) ? oldState.chosenCodes.filter(x => x !== code) : oldState.chosenCodes.concat(code)\n    }))\n  }\n, addUnitName = (comp, evt) => comp.setState({unitName: evt.target.value})\n, addCodes = comp => {\n    comp.setState((oldState) => ({\n      unitCodes: oldState.unitCodes.concat(`${oldState.unitName} ${oldState.chosenCodes.join(', ')}`),\n      chosenCodes: [],\n      unitName: '',\n    }))\n  }\n, CodeButton = styled.button`\n    background-color: ${props => props.state.chosenCodes.includes(props.code) ? 'green' : 'none'}\n  `\n;\nclass App extends Component {\n  state = {\n    codes: {\n      mmc: 'Missing Chimney Cap'\n    , md: 'Missing Damper'\n    , bd: 'Broken Damper'\n    , mss: 'Missing Spark Screen'\n    , dss: 'amaged Spark Screen'\n    , lrp: 'damaged Left Refractory Panel'\n    , brp: 'damaged Back Refractory Panel'\n    , rrp: 'damaged Right Refractory Panel'\n    , bp: 'damaged Base Panel'\n    , mlrp: 'Missing Left Refractory Panel'\n    , mbrp: 'Missing Back Refractory Panel'\n    , mrrp: 'Missing Right Refractory Panel'\n    , mbp: 'Missing Base Panel'\n    , tv: 'TV'\n    , dog: 'DOG'\n    , b: 'Blocked'\n    , l: 'Locked from the inside'\n    , nk: 'No Key'\n    , knw: 'Key Not Work'\n    , s: 'Skip per mgmt'\n    , min: 'Minor'\n    },\n    chosenCodes: [],\n    unitName: '',\n    unitCodes: [],\n  }\n  render() {\n    const { state } = this\n    return (\n      <div>\n        <label htmlFor=\"unit\">Unit</label>\n        <input name=\"unit\" value={state.unitName} onChange={evt => addUnitName(this, evt)} type=\"text\" />\n        {\n          Object.keys(state.codes).map((k, i) =>\n            <CodeButton\n              state={state}\n              code={k}\n              key={k}\n              onClick={evt => addCode(this, k)}\n            >\n              {state.codes[k]}\n            </CodeButton>)\n        }\n        <button style={{\n          width: '100%',\n          padding: '10px',\n        }} onClick={evt => addCodes(this)}>Add Codes</button>\n        <ul id=\"report\" style={{\n          listStyleType: 'none'\n        }}>\n        {\n          state.unitCodes.map((x, i) => <li key={i}>{x}</li>)\n        }\n        </ul>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}