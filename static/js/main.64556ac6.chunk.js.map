{"version":3,"sources":["xhr.js","cookie.js","Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["xhr","id","fetch","method","body","JSON","stringify","query","concat","headers","Content-Type","makeCookieString","name","value","days","expires","date","Date","setTime","getTime","toGMTString","getCookie","parts","document","cookie","split","length","decodeURIComponent","pop","shift","console","log","Esc","styled","span","_templateObject","Modal","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Container","div","_templateObject2","width","height","open","styles","react_default","a","createElement","onClick","close","className","children","React","Component","addCode","comp","code","setState","showOtherModal","oldState","chosenCodes","includes","filter","x","CodeButton","button","App_templateObject","SaveButton","App_templateObject2","SaveJobButton","_templateObject3","EndJobButton","_templateObject4","AddCodesButton","_templateObject5","handleCSVDownload","columns","data","CSVHead","reduce","soFar","column","slice","CSVBody","row","join","trim","csv","blob","Blob","type","dataURI","URL","window","webkitURL","downloadURI","createObjectURL","link","setAttribute","appendChild","click","removeChild","formatData","R","map","unit","codes","createdAt","deviceId","job","reverse","getUnitCodesAndDownload","then","r","json","withCSTTime","unitCodes","uc","format","allUnitCodes","catch","error","firstCodeMatches","getOldRecords","jobName","unitName","deleteOldRecord","recordToDelete","saveCodes","createUnitCode","errors","goodResponse","toConsumableArray","response","newUnitCode","addCodesAndReset","App","updateOtherDesc","evt","otherDesc","target","closeOtherModal","addCodes","_this$state","assertThisInitialized","cc","foobar","createRef","userName","showModal","unServicedCodes","servicedWithIssuesCodes","servicedNoIssuesCodes","_this2","placeholder","style","padding","boxSizing","onChange","updateUserName","updateJobName","alert","addUnitName","i","key","listStyleType","unitCodeArray","_","redoCode","keys","deviceUnitCodes","downloadServiceNoIssuesUnitCodes","some","downloadServiceWithIssuesUnitCodes","unitCode","downloadUnservicedUnitCodesFromDevice","downloadAllUnitCodesFromDevice","jobUnitCodes","sortedCodes","downloadPerJob","Modal_Modal","onBlur","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64556ac6.chunk.js","sourcesContent":["const del = (id) => {\n    return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n      method: 'POST',\n      body: JSON.stringify({\n        query: `\n          mutation {\n            deleteUnitCode(where: {\n              id: \"${id}\"\n            }) {\n              id\n            }\n          }\n        `\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n  }\n; // eslint-disable-line semi\n\nexport default { del }\n","import { pipe } from 'ramda'\nexport function getDomain(w) {\n  const url = w.location.origin\n  if (url.includes('localhost')) return 'localhost'\n\n\treturn  pipe(\n        x => x.split('.')\n      , xs => xs.slice(-2)\n      , xs => xs.join('.')\n      , x => `.${x}`,\n    )(url)\n}\nfunction makeCookieString(name, value, days) {\n  let expires = ''\n  if (days) {\n    const date = new Date()\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))\n    expires = `; expires=${date.toGMTString()}`\n  }\n  return `${name}=${value}${expires};domain=cotterjd.github.io;path=/`\n}\nfunction getCookie(name) {\n  const value = `; ${document.cookie}`\n  const parts = value.split(`; ${name}=`)\n  if (parts.length === 2) {\n return (\n      decodeURIComponent(\n        parts\n          .pop()\n          .split(';')\n          .shift(),\n      ) || ''\n    )\n}\n  return ''\n}\nfunction deleteCookieString(name) {\n  return `${name}=; path=/; domain=${getDomain(window)}; expires=Thu, 01 Jan 1970 00:00:01 GMT;`\n}\n\nexport { makeCookieString, getCookie, deleteCookieString }\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst\n  log = console.log // eslint-disable-line\n\n, Esc = styled.span`\n    position: absolute;\n    right: 10px;\n    top: 5px;\n    font-size: 24px;\n    opacity: 0.5;\n\n    :hover {\n      cursor: pointer;\n    }\n  `\n; // eslint-disable-line semi\n\n// NOT IN USE. CONSIDER PURGING\nexport default class Modal extends React.Component {\n  constructor(props, context) {\n    super(props, context)\n    this.state = {\n    }\n  }\n  render() {\n    const { props } = this\n    , Container = styled.div`\n        width: ${props.width || 'auto'};\n        height: ${props.height || 'auto'};\n        box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.1);\n        background-color: #ffffff;\n        top: 0;\n        left: 0;\n\n        overflow-y: auto;\n        padding: 30px;\n        display: ${props => props.open ? 'block' : 'none'};\n        z-index: 3;\n        position: fixed;\n        ${props.styles}\n      `\n    ; // eslint-disable-line semi\n    return (\n      <Container open={props.open}>\n        <Esc\n          onClick={props.close}\n          className=\"clickable\"\n        >&#x2715;</Esc>\n        {props.children}\n      </Container>\n    )\n  }\n}\n\nModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  height: PropTypes.string,\n  width: PropTypes.string,\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport * as R from 'ramda'\nimport xhr from './xhr'\nimport {format} from 'date-fns'\nimport { makeCookieString, getCookie } from './cookie'\nimport Modal from './Modal'\n\nconst log = console.log // eslint-disable-line no-unused-vars\n\n, addCode = (comp, code) => {\n    if (code === `OTHER` || code === `Broken Damper - Other`) {\n      comp.setState({showOtherModal: true})\n    }\n    comp.setState((oldState, props) => ({\n      chosenCodes: oldState.chosenCodes.includes(code) ? oldState.chosenCodes.filter(x => x !== code) : oldState.chosenCodes.concat(code)\n    }))\n  }\n, addUnitName = (comp, evt) => comp.setState({unitName: evt.target.value})\n, updateUserName = (comp, evt) => comp.setState({userName: evt.target.value})\n, updateJobName = (comp, evt) => comp.setState({job: evt.target.value})\n, saveUserName = (comp) => {\n    document.cookie=makeCookieString('userName', comp.state.userName, 365)\n    comp.setState({deviceId: comp.state.userName})\n  }\n, saveJobName = (comp) => {\n    if (!comp.state.job) alert(`Property name required`)\n    document.cookie=makeCookieString('job', comp.state.jobName, 365)\n    comp.setState({jobName: comp.state.job})\n  }\n, endJob = (comp) => {\n    document.cookie=makeCookieString('job', ``, 365)\n    comp.setState({jobName: ``, job: ``})\n  }\n, CodeButton = styled.button`\n    background-color: ${props => props.state.chosenCodes.includes(props.code) ? 'green' : 'none'};\n    color: ${props => props.state.chosenCodes.includes(props.code) ? 'white' : (props.code.includes(`Completed`) ? 'green' : 'none')};\n    width: 99%;\n    padding: 15px;\n  `\n, SaveButton = styled.button`\n    background-color: #805716;\n    color: #ffffff;\n    width: 99%;\n    padding: 25px 15px;\n    margin: 5px;\n    border-radius: 10px;\n  `\n, SaveJobButton = styled.button`\n    background-color: green;\n    color: #ffffff;\n    width: 99%;\n    padding: 25px 15px;\n    margin: 5px;\n    border-radius: 10px;\n    text-transform: uppercase;\n  `\n, EndJobButton = styled.button`\n    background-color: red;\n    color: #ffffff;\n    width: 99%;\n    padding: 25px 15px;\n    margin: 5px;\n    border-radius: 10px;\n    text-transform: uppercase;\n  `\n, AddCodesButton = styled.button`\n    width: 100%;\n    padding: 20px;\n    background-color: #74fff8;\n  `\n// [String] -> [Array] -> null\n, handleCSVDownload = (columns, data) => {\n    const CSVHead = `${columns.reduce((soFar, column) => `${soFar}\"${column}\",`, '').slice(0, -1)}\\r\\n`\n    let CSVBody = data.reduce((soFar, row) => `${soFar}\"${row.join('\",\"')}\"\\r\\n`, [])\n    if (typeof CSVBody === \"string\") {\n      CSVBody = CSVBody.trim()\n    } else CSVBody = ''\n    /* taken from react-csv */\n    const csv = `${CSVHead}${CSVBody}`\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const dataURI = `data:text/csv;charset=utf-8,${csv}`\n\n    const URL = window.URL || window.webkitURL\n    const downloadURI = typeof URL.createObjectURL === 'undefined' ? dataURI : URL.createObjectURL(blob)\n\n    const link = document.createElement('a')\n    link.setAttribute('href', downloadURI)\n    link.setAttribute('download', 'tableDownload.csv')\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n  }\n, formatData = data => R.sortBy(R.props('createdAt'), data).map(x => [ x.unit, x.codes, x.createdAt, x.deviceId, x.job ]).reverse()\n, getUnitCodesAndDownload = (comp) => {\n    return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n      method: 'POST',\n      body: JSON.stringify({\n        query: `\n          query {\n            unitCodes {\n              unit\n              codes\n              createdAt\n              deviceId\n              job\n            }\n          }\n        `\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(r => r.json())\n    .then(r => {\n      const withCSTTime = r.data.unitCodes.map(uc => R.assoc('createdAt', format(new Date(uc.createdAt), 'MM/DD/YYYY h:mm'), uc))\n      comp.setState({allUnitCodes: withCSTTime})\n    })\n    .catch(console.error)\n  }\n  // assume codes are put in correctly, only first has to match because they'll be the same type\n, firstCodeMatches = (codes, x) => codes.includes(x.codes.split(', ')[0])\n, downloadServiceWithIssuesUnitCodes = (comp, deviceId) => {\n    const deviceUnitCodes = comp.state.allUnitCodes.filter(\n        x => x.deviceId === deviceId && (firstCodeMatches(comp.state.servicedWithIssuesCodes, x) || x.codes.split(`, `).some(code => code.includes(`Broken Damper - Other`) ) )\n        )\n    const data = formatData(deviceUnitCodes)\n    handleCSVDownload(comp.state.columns, data)\n    comp.setState({showModal: false})\n  }\n, downloadServiceNoIssuesUnitCodes = (comp, deviceId) => {\n    const deviceUnitCodes = comp.state.allUnitCodes.filter(x => x.deviceId === deviceId && firstCodeMatches(comp.state.servicedNoIssuesCodes, x))\n    const data = formatData(deviceUnitCodes)\n    handleCSVDownload(comp.state.columns, data)\n    comp.setState({showModal: false})\n  }\n, downloadPerJob = (comp, job) => {\n    const jobUnitCodes = comp.state.allUnitCodes.filter(x => x.job === job)\n    const sortedCodes = R.sortBy(R.prop(`codes`), jobUnitCodes) \n    const data = formatData(sortedCodes)\n    handleCSVDownload(comp.state.columns, data)\n  }\n, downloadUnservicedUnitCodesFromDevice = (comp, deviceId) => {\n    const deviceUnitCodes = comp.state.allUnitCodes\n      .filter(\n        unitCode => unitCode.deviceId === deviceId &&\n        // if not No issues and not serviced with issues, it's unserviced\n        !firstCodeMatches(comp.state.servicedWithIssuesCodes, unitCode) &&\n        !firstCodeMatches(comp.state.servicedNoIssuesCodes, unitCode)\n      )\n    const data = formatData(deviceUnitCodes)\n    handleCSVDownload(comp.state.columns, data)\n    comp.setState({showModal: false})\n  }\n, downloadAllUnitCodesFromDevice = (comp, deviceId) => {\n    const deviceUnitCodes = comp.state.allUnitCodes\n      .filter(unitCode => unitCode.deviceId === deviceId)\n    const data = formatData(deviceUnitCodes)\n    handleCSVDownload(comp.state.columns, data)\n    comp.setState({showModal: false})\n  }\n, getOldRecords = (comp) => {\n    return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n      method: 'POST',\n      body: JSON.stringify({\n        query: `\n          {\n            unitCodes(orderBy: createdAt_DESC where: {\n              job: \"${comp.state.jobName}\"\n              unit: \"${comp.state.unitName}\"\n            }) {\n              id\n              createdAt\n              codes\n              job\n            }\n          }\n        `\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(r => r.json())\n    .catch(console.error)\n  }\n, deleteOldRecord = (comp, recordToDelete) => {\n    return xhr.del(recordToDelete.id)\n      .then(r => r.json())\n      .catch(console.error)\n  }\n, redoCode = (comp, unitCodeArray, i) => {\n    const id = R.head(unitCodeArray) \n    const unitName = R.head(R.tail(unitCodeArray))\n    // const chosenCodes = R.last(unitCodeArray).split(`, `)\n    xhr.del(id)\n      .then(r => r.json())\n      .then(_ => {\n        comp.setState({\n          unitName, \n          // chosenCodes,\n        })\n      })\n      .catch(console.error)\n  }\n, goodResponse = (r) => {\n    return r && r.data && r.data.createUnitCode && !r.errors\n  }\n, addCodesAndReset = (response, oldState) => {\n    const newUnitCode = response.data.createUnitCode\n    return {\n      unitCodes: [...oldState.unitCodes, [newUnitCode.id, oldState.unitName, oldState.chosenCodes.join(', ')]],\n      chosenCodes: [],\n      unitName: '',\n    }\n  }\n, saveCodes = (comp) => {\n    return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n      method: 'POST',\n      body: JSON.stringify({\n        query: `\n          mutation {\n            createUnitCode(data: {\n              deviceId: \"${comp.state.deviceId}\"\n              unit: \"${comp.state.unitName}\"\n              codes: \"${comp.state.chosenCodes.join(', ')}\"\n              job: \"${comp.state.jobName}\"\n            }) {\n              id job unit\n            }\n          }\n        `\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(r => r.json())\n    .then(r => {\n       if(goodResponse(r)) {\n         console.log(`RESPONSE`, r)\n         comp.setState(oldState => addCodesAndReset(r, oldState))\n       } else {\n         comp.setState((oldState) => ({\n           unitCodes: [...oldState.unitCodes, [oldState.unitName, 'NOT SAVED. make sure you have a internet connection and try again']],\n           chosenCodes: [],\n           unitName: '',\n         }))\n       }\n       }\n    )\n    .catch(console.error)\n  }\n;\nclass App extends Component {\n  constructor() {\n    super()\n    this.foobar = React.createRef()\n    this.state = {\n      chosenCodes: [],\n      unitName: '',\n      unitCodes: [],\n      allUnitCodes: [],\n      userName: '',\n      deviceId: getCookie('userName'),\n      jobName: getCookie('job'),\n      showModal: false,\n      showOtherModal: false,\n      otherDesc: ``,\n      columns: ['unit', 'codes', 'created date', 'device ID', `job`],\n      unServicedCodes: [\n        'TV'\n      , 'Dog'\n      , 'Blocked'\n      , 'Locked From The Inside'\n      , 'No Key'\n      , 'Key Not Work'\n      , 'Skip Per Management'\n      , 'Minor'\n      , 'Denied Entry'\n      , 'see css'\n      , 'OTHER'\n      ],\n      servicedWithIssuesCodes: [\n        'Missing Chimney Cap'\n      , 'Missing Damper'\n      , 'Broken Damper - Other'\n      , 'Broken Damper - stays open'\n      , 'Broken Damper - closed/won\\'t open'\n      , 'Broken Damper - Not Connected'\n      , 'Missing Spark Screen'\n      , 'Damaged Spark Screen'\n      , 'Damaged Left Refractory Panel'\n      , 'Damaged Back Refractory Panel'\n      , 'Damaged Right Refractory Panel'\n      , 'Damaged Base Panel'\n      , 'Missing Left Refractory Panel'\n      , 'Missing Back Refractory Panel'\n      , 'Missing Right Refractory Panel'\n      , 'Missing Base Panel'\n      , 'see  css'\n      , 'Went Back'\n      ],\n      servicedNoIssuesCodes: [\n        `Completed. No Issues.`\n      ],\n    }\n    getUnitCodesAndDownload(this)\n  }\n\n  updateOtherDesc = evt => {\n    this.setState({\n      otherDesc: evt.target.value,\n      showOtherModal: false,\n    })\n  }\n  closeOtherModal = evt => {\n    this.setState({ showOtherModal: false })\n  }\n  addCodes = evt => {\n    const { unitName, chosenCodes, otherDesc } = this.state\n    if (!!unitName && chosenCodes.length) {\n      if (chosenCodes.includes('Went Back')) {\n        getOldRecords(this)\n        .then(r => {\n          if(!r.errors) {\n            deleteOldRecord(this, R.head(r.data.unitCodes))\n          } else {\n            console.log(r.errors)\n          }\n        })\n        .then(r => saveCodes(this))\n      } else if (chosenCodes.includes(`OTHER`)) {\n        this.setState(state => ({\n          chosenCodes: chosenCodes.map(cc => {\n            if (cc === `OTHER`) return `OTHER ${otherDesc}`\n            return cc\n          })\n        }), () => saveCodes(this))\n      } else if (chosenCodes.includes(`Broken Damper - Other`)) {\n        this.setState(state => ({\n          chosenCodes: chosenCodes.map(cc => {\n            if (cc === `Broken Damper - Other`) return `Broken Damper - Other ${otherDesc}`\n            return cc\n          })\n        }), () => saveCodes(this))\n      } else {\n        saveCodes(this)\n      }\n    }\n  }\n\n  render() {\n    const { state } = this\n\n    return (\n      <div>\n        {\n          !state.deviceId &&\n            <div>\n              <input\n                name=\"username\"\n                placeholder=\"User Name\"\n                style={{width: '100%', padding: '20px', boxSizing: 'border-box'}}\n                value={state.userName}\n                onChange={evt => updateUserName(this, evt)}\n                type=\"text\"\n              />\n              <SaveButton onClick={evt => saveUserName(this)}>Save User Name</SaveButton>\n            </div>\n        }\n        {\n          !state.jobName &&\n            <div>\n              <input\n                name=\"jobname\"\n                placeholder=\"Property Name\"\n                style={{width: '100%', padding: '20px', boxSizing: 'border-box'}}\n                value={state.job}\n                onChange={evt => updateJobName(this, evt)}\n                type=\"text\"\n              />\n              <SaveJobButton onClick={evt => saveJobName(this)}>Start new property</SaveJobButton>\n            </div>\n        }\n        <input name=\"unit\" placeholder=\"Unit\" style={{width: '100%', padding: '20px', boxSizing: 'border-box'}} value={state.unitName} onChange={evt => addUnitName(this, evt)} type=\"text\" />\n        {\n          state.servicedWithIssuesCodes.map((x, i) =>\n            <CodeButton\n              state={state}\n              code={x}\n              key={x}\n              onClick={evt => addCode(this, x)}\n            >\n              {x}\n            </CodeButton>)\n        }\n        <br />\n        {\n          state.servicedNoIssuesCodes.map((x, i) =>\n            <CodeButton\n              state={state}\n              code={x}\n              key={x}\n              onClick={evt => addCode(this, x)}\n            >\n              {x}\n            </CodeButton>)\n        }\n        <br />\n        <br />\n        {\n          state.unServicedCodes.map((x, i) =>\n            <CodeButton\n              state={state}\n              code={x}\n              key={x}\n              onClick={evt => addCode(this, x)}\n            >\n              {x}\n            </CodeButton>)\n        }\n        <AddCodesButton onClick={this.addCodes}>Add Codes</AddCodesButton>\n        <ul id=\"report\" style={{\n          listStyleType: 'none'\n        }}>\n        {\n          state.unitCodes.map((x, i) => <li key={i}>\n              {x}<button onClick={evt => redoCode(this, x, i)}>Redo</button>\n              </li>)\n        }\n        </ul>\n        { !!this.state.jobName &&<EndJobButton onClick={evt => endJob(this)}>End Property</EndJobButton>}\n        <h4>Reports By User/type</h4>\n        {\n          Object.keys(R.groupBy(R.prop('deviceId'), this.state.allUnitCodes))\n            .map((x, i) =>\n              (<div key={i}>\n                <button onClick={evt => downloadServiceNoIssuesUnitCodes(this, x)}>{`${x} (Completed. No Issues)`}</button>\n                <button onClick={evt => downloadServiceWithIssuesUnitCodes(this, x)}>{`${x} (Completed with issues)`}</button>\n                <button onClick={evt => downloadUnservicedUnitCodesFromDevice(this, x)}>{`${x} (NA)`}</button>\n                <button onClick={evt => downloadAllUnitCodesFromDevice(this, x)}>{`All`}</button>\n              </div>)\n            )\n        }\n        <h4>Property Reports</h4>\n        {\n          Object.keys(\n            R.groupBy(\n              R.prop(`job`),\n              R.sort(R.descend(R.prop(`createdAt`)), this.state.allUnitCodes)\n            )\n          ).map(job => {\n            return <button key={job} onClick={evt => downloadPerJob(this, job)}>{job}</button>\n          })\n        }\n        <Modal\n          open={state.showOtherModal}\n          close={evt => this.setState({showOtherModal: false})}\n        >\n          <h4>Add description</h4>\n          <input type=\"text\" value={this.otherDesc} onBlur={this.updateOtherDesc} />\n          <button onClick={evt => this.setState({showOtherModal: false})}>Save</button>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}