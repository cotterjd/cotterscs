{"version":3,"sources":["xhr/index.js","utils/cookie.js","Modal/index.js","utils/handleCSVDownload.js","utils/index.js","styled/index.js","App.js","serviceWorker.js","index.js"],"names":["xhr","id","fetch","method","body","JSON","stringify","query","concat","headers","Content-Type","then","r","json","jobName","unitName","catch","console","error","deviceId","chosenCodes","join","getDomain","w","url","location","origin","includes","pipe","x","split","xs","slice","makeCookieString","name","value","days","expires","date","Date","setTime","getTime","toGMTString","window","getCookie","parts","document","cookie","length","decodeURIComponent","pop","shift","log","Esc","styled","span","_templateObject","Modal","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Container","div","_templateObject2","width","height","open","styles","react_default","a","createElement","onClick","close","className","children","React","Component","handleCSVDownload","columns","data","CSVHead","reduce","soFar","column","CSVBody","row","trim","csv","blob","Blob","type","dataURI","URL","webkitURL","downloadURI","createObjectURL","link","setAttribute","appendChild","click","removeChild","utils","sortedJobNames","unitCodes","sortedJobs","R","createdAt","groupObj","keys","CodeButton","button","styled_templateObject","code","SaveButton","styled_templateObject2","SaveJobButton","_templateObject3","EndJobButton","_templateObject4","AddCodesButton","_templateObject5","addCode","comp","setState","showOtherModal","oldState","_","filter","formatData","map","unit","codes","job","reverse","setUnitCodes","withCSTTime","uc","format","allUnitCodes","firstCodeMatches","getOldRecords","deleteOldRecord","recordToDelete","saveCodes","_comp$state","createUnitCode","errors","goodResponse","toConsumableArray","response","newUnitCode","addCodesAndReset","alert","App","updateOtherDesc","evt","otherDesc","target","closeOtherModal","addCodes","_this$state","assertThisInitialized","cc","userName","showModal","unServicedCodes","servicedWithIssuesCodes","servicedNoIssuesCodes","_this2","placeholder","style","padding","boxSizing","onChange","updateUserName","updateJobName","addUnitName","i","key","listStyleType","unitCodeStr","unitCodeArray","redoCode","deviceUnitCodes","downloadServiceNoIssuesUnitCodes","some","downloadServiceWithIssuesUnitCodes","unitCode","downloadUnservicedUnitCodesFromDevice","downloadAllUnitCodesFromDevice","jobUnitCodes","sortedCodes","downloadPerJob","Modal_Modal","onBlur","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aefef470.chunk.js","sourcesContent":["const del = (id) => {\n    return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n      method: 'POST',\n      body: JSON.stringify({\n        query: `\n          mutation {\n            deleteUnitCode(where: {\n              id: \"${id}\"\n            }) {\n              id\n            }\n          }\n        `\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n  }\n, listUnitCodes = () => {\n    return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n      method: 'POST',\n      body: JSON.stringify({\n        query: `\n          query {\n            unitCodes {\n              unit\n              codes\n              createdAt\n              deviceId\n              job\n            }\n          }\n        `\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(r => r.json())\n  }\n, listOldRecords = (jobName, unitName) => {\n    return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n      method: 'POST',\n      body: JSON.stringify({\n        query: `\n          {\n            unitCodes(orderBy: createdAt_DESC where: {\n              job: \"${jobName}\"\n              unit: \"${unitName}\"\n            }) {\n              id\n              createdAt\n              codes\n              job\n            }\n          }\n        `\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(r => r.json())\n    .catch(console.error)\n  }\n, saveCodes = (deviceId, unitName, chosenCodes, jobName) => {\n    return fetch('https://us1.prisma.sh/jordan-cotter-820a2c/cruise/dev', {\n      method: 'POST',\n      body: JSON.stringify({\n        query: `\n          mutation {\n            createUnitCode(data: {\n              deviceId: \"${deviceId}\"\n              unit: \"${unitName}\"\n              codes: \"${chosenCodes.join(', ')}\"\n              job: \"${jobName}\"\n            }) {\n              id job unit\n            }\n          }\n        `\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(r => r.json())\n}\n; // eslint-disable-line semi\n\n\nexport default { del, listUnitCodes, listOldRecords, saveCodes, }\n","import { pipe } from 'ramda'\nexport function getDomain(w) {\n  const url = w.location.origin\n  if (url.includes('localhost')) return 'localhost'\n\n\treturn  pipe(\n        x => x.split('.')\n      , xs => xs.slice(-2)\n      , xs => xs.join('.')\n      , x => `.${x}`,\n    )(url)\n}\nfunction makeCookieString(name, value, days) {\n  let expires = ''\n  if (days) {\n    const date = new Date()\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))\n    expires = `; expires=${date.toGMTString()}`\n  }\n  return `${name}=${value}${expires};domain=${getDomain(window)};path=/`\n}\nfunction getCookie(name) {\n  const value = `; ${document.cookie}`\n  const parts = value.split(`; ${name}=`)\n  if (parts.length === 2) {\n return (\n      decodeURIComponent(\n        parts\n          .pop()\n          .split(';')\n          .shift(),\n      ) || ''\n    )\n}\n  return ''\n}\nfunction deleteCookieString(name) {\n  return `${name}=; path=/; domain=${getDomain(window)}; expires=Thu, 01 Jan 1970 00:00:01 GMT;`\n}\n\nexport { makeCookieString, getCookie, deleteCookieString }\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst\n  log = console.log // eslint-disable-line\n\n, Esc = styled.span`\n    position: absolute;\n    right: 10px;\n    top: 5px;\n    font-size: 24px;\n    opacity: 0.5;\n\n    :hover {\n      cursor: pointer;\n    }\n  `\n; // eslint-disable-line semi\n\n// NOT IN USE. CONSIDER PURGING\nexport default class Modal extends React.Component {\n  constructor(props, context) {\n    super(props, context)\n    this.state = {\n    }\n  }\n  render() {\n    const { props } = this\n    , Container = styled.div`\n        width: ${props.width || 'auto'};\n        height: ${props.height || 'auto'};\n        box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.1);\n        background-color: #ffffff;\n        top: 0;\n        left: 0;\n\n        overflow-y: auto;\n        padding: 30px;\n        display: ${props => props.open ? 'block' : 'none'};\n        z-index: 3;\n        position: fixed;\n        ${props.styles}\n      `\n    ; // eslint-disable-line semi\n    return (\n      <Container open={props.open}>\n        <Esc\n          onClick={props.close}\n          className=\"clickable\"\n        >&#x2715;</Esc>\n        {props.children}\n      </Container>\n    )\n  }\n}\n\nModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  height: PropTypes.string,\n  width: PropTypes.string,\n}\n","\nexport const handleCSVDownload = (columns, data) => {\n    const CSVHead = `${columns.reduce((soFar, column) => `${soFar}\"${column}\",`, '').slice(0, -1)}\\r\\n`\n    let CSVBody = data.reduce((soFar, row) => `${soFar}\"${row.join('\",\"')}\"\\r\\n`, [])\n    if (typeof CSVBody === \"string\") {\n      CSVBody = CSVBody.trim()\n    } else CSVBody = ''\n    /* taken from react-csv */\n    const csv = `${CSVHead}${CSVBody}`\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const dataURI = `data:text/csv;charset=utf-8,${csv}`\n\n    const URL = window.URL || window.webkitURL\n    const downloadURI = typeof URL.createObjectURL === 'undefined' ? dataURI : URL.createObjectURL(blob)\n\n    const link = document.createElement('a')\n    link.setAttribute('href', downloadURI)\n    link.setAttribute('download', 'tableDownload.csv')\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n  }","import * as R from 'ramda'\n\nexport * from './handleCSVDownload'\nexport default {\n\tsortedJobNames,\n}\n\nfunction sortedJobNames (unitCodes) {\n\tconst sortedJobs = R.sort(R.descend(x => new Date(x.createdAt)), unitCodes)\n\tconst groupObj = R.groupBy(R.prop(`job`), sortedJobs)\n\tconst jobNames = Object.keys(groupObj)\n\n\treturn jobNames\n}","import styled from 'styled-components'\n\nexport const CodeButton = styled.button`\n    background-color: ${props => props.state.chosenCodes.includes(props.code) ? 'green' : 'none'};\n    color: ${props => props.state.chosenCodes.includes(props.code) ? 'white' : (props.code.includes(`Completed`) ? 'green' : 'none')};\n    width: 99%;\n    padding: 15px;\n  `\nexport const SaveButton = styled.button`\n    background-color: #805716;\n    color: #ffffff;\n    width: 99%;\n    padding: 25px 15px;\n    margin: 5px;\n    border-radius: 10px;\n  `\nexport const SaveJobButton = styled.button`\n    background-color: green;\n    color: #ffffff;\n    width: 99%;\n    padding: 25px 15px;\n    margin: 5px;\n    border-radius: 10px;\n    text-transform: uppercase;\n  `\nexport const EndJobButton = styled.button`\n    background-color: red;\n    color: #ffffff;\n    width: 99%;\n    padding: 25px 15px;\n    margin: 5px;\n    border-radius: 10px;\n    text-transform: uppercase;\n  `\nexport const AddCodesButton = styled.button`\n    width: 100%;\n    padding: 20px;\n    background-color: #74fff8;\n  `","import React, { Component } from 'react';\nimport './App.css';\nimport * as R from 'ramda'\nimport xhr from './xhr'\nimport {format} from 'date-fns'\nimport { makeCookieString, getCookie } from './utils/cookie'\nimport Modal from './Modal'\nimport utils, { handleCSVDownload } from './utils'\nimport { CodeButton, SaveButton, SaveJobButton, EndJobButton, AddCodesButton } from './styled'\n\nconst log = console.log // eslint-disable-line no-unused-vars\n\n, addCode = (comp, code) => {\n    if (code === `OTHER` || code === `Broken Damper - Other`) {\n      comp.setState({showOtherModal: true})\n    }\n    comp.setState((oldState, _) => ({\n      chosenCodes: oldState.chosenCodes.includes(code) ? oldState.chosenCodes.filter(x => x !== code) : oldState.chosenCodes.concat(code)\n    }))\n  }\n, addUnitName = (comp, evt) => comp.setState({unitName: evt.target.value})\n, updateUserName = (comp, evt) => comp.setState({userName: evt.target.value})\n, updateJobName = (comp, evt) => comp.setState({job: evt.target.value})\n, saveUserName = (comp) => {\n    document.cookie=makeCookieString('userName', comp.state.userName, 365)\n    comp.setState({deviceId: comp.state.userName})\n  }\n, saveJobName = (comp) => {\n    if (!comp.state.job) alert(`Property name required`)\n    document.cookie=makeCookieString('job', comp.state.job, 365)\n    comp.setState({jobName: comp.state.job})\n  }\n, endJob = (comp) => {\n    document.cookie=makeCookieString('job', ``, 365)\n    comp.setState({jobName: ``, job: ``})\n  }\n// [String] -> [Array] -> null\n, formatData = data => R.sortBy(R.props('createdAt'), data).map(x => [ x.unit, x.codes, x.createdAt, x.deviceId, x.job ]).reverse()\n, setUnitCodes = (comp) => {\n    xhr.listUnitCodes()\n    .then(r => {\n      const withCSTTime = r.data.unitCodes.map(uc => R.assoc('createdAt', format(new Date(uc.createdAt), 'MM/DD/YYYY h:mm'), uc))\n      comp.setState({allUnitCodes: withCSTTime})\n    })\n    .catch(console.error)\n  }\n  // assume codes are put in correctly, only first has to match because they'll be the same type\n, firstCodeMatches = (codes, x) => codes.includes(x.codes.split(', ')[0])\n, downloadServiceWithIssuesUnitCodes = (comp, deviceId) => {\n    const deviceUnitCodes = comp.state.allUnitCodes.filter(\n        x => x.deviceId === deviceId && (firstCodeMatches(comp.state.servicedWithIssuesCodes, x) || x.codes.split(`, `).some(code => code.includes(`Broken Damper - Other`) ) )\n        )\n    const data = formatData(deviceUnitCodes)\n    handleCSVDownload(comp.state.columns, data)\n    comp.setState({showModal: false})\n  }\n, downloadServiceNoIssuesUnitCodes = (comp, deviceId) => {\n    const deviceUnitCodes = comp.state.allUnitCodes.filter(x => x.deviceId === deviceId && firstCodeMatches(comp.state.servicedNoIssuesCodes, x))\n    const data = formatData(deviceUnitCodes)\n    handleCSVDownload(comp.state.columns, data)\n    comp.setState({showModal: false})\n  }\n, downloadPerJob = (comp, job) => {\n    const jobUnitCodes = comp.state.allUnitCodes.filter(x => x.job === job)\n    const sortedCodes = R.sortBy(R.prop(`codes`), jobUnitCodes) \n    const data = formatData(sortedCodes)\n    handleCSVDownload(comp.state.columns, data)\n  }\n, downloadUnservicedUnitCodesFromDevice = (comp, deviceId) => {\n    const deviceUnitCodes = comp.state.allUnitCodes\n      .filter(\n        unitCode => unitCode.deviceId === deviceId &&\n        // if not No issues and not serviced with issues, it's unserviced\n        !firstCodeMatches(comp.state.servicedWithIssuesCodes, unitCode) &&\n        !firstCodeMatches(comp.state.servicedNoIssuesCodes, unitCode)\n      )\n    const data = formatData(deviceUnitCodes)\n    handleCSVDownload(comp.state.columns, data)\n    comp.setState({showModal: false})\n  }\n, downloadAllUnitCodesFromDevice = (comp, deviceId) => {\n    const deviceUnitCodes = comp.state.allUnitCodes\n      .filter(unitCode => unitCode.deviceId === deviceId)\n    const data = formatData(deviceUnitCodes)\n    handleCSVDownload(comp.state.columns, data)\n    comp.setState({showModal: false})\n  }\n, getOldRecords = (comp) => {\n    return xhr.listOldRecords(comp.state.jobName, comp.state.unitName)\n  }\n, deleteOldRecord = (recordToDelete) => {\n    return xhr.del(recordToDelete.id)\n      .then(r => r.json())\n      .catch(console.error)\n  }\n, redoCode = (comp, unitCodeStr, i) => {\n    const unitCodeArray = unitCodeStr.split(`, `)\n    const id = R.head(unitCodeArray) \n    const unitName = R.head(R.tail(unitCodeArray))\n    xhr.del(id)\n      .then(r => r.json())\n      .then(_ => {\n        comp.setState({\n          unitName, \n        })\n      })\n      .catch(console.error)\n  }\n, goodResponse = (r) => {\n    return r && r.data && r.data.createUnitCode && !r.errors\n  }\n, addCodesAndReset = (response, oldState) => {\n    const newUnitCode = response.data.createUnitCode\n    return {\n      unitCodes: [...oldState.unitCodes, [newUnitCode.id, oldState.unitName, oldState.chosenCodes].join(', ')],\n      chosenCodes: [],\n      unitName: '',\n    }\n  }\n, saveCodes = (comp) => {\n    const { deviceId, unitName, chosenCodes, jobName } = comp.state\n    if (!deviceId) return alert(`Please add your user.`)\n    if (!jobName) return alert(`Please add a job.`)\n    xhr.saveCodes(deviceId, unitName, chosenCodes, jobName)\n    .then(r => {\n       if(goodResponse(r)) {\n         comp.setState(oldState => addCodesAndReset(r, oldState))\n       } else {\n         comp.setState((oldState) => ({\n           unitCodes: [...oldState.unitCodes, [oldState.unitName, 'NOT SAVED. make sure you have a internet connection and try again']],\n           chosenCodes: [],\n           unitName: '',\n         }))\n       }\n       }\n    )\n    .catch(console.error)\n  }\n;\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      chosenCodes: [],\n      unitName: '',\n      unitCodes: [],\n      allUnitCodes: [],\n      userName: '',\n      deviceId: getCookie('userName'),\n      jobName: getCookie('job'),\n      showModal: false,\n      showOtherModal: false,\n      otherDesc: ``,\n      columns: ['unit', 'codes', 'created date', 'device ID', `job`],\n      unServicedCodes: [\n        'TV'\n      , 'Dog'\n      , 'Blocked'\n      , 'Locked From The Inside'\n      , 'No Key'\n      , 'Key Not Work'\n      , 'Skip Per Management'\n      , 'Minor'\n      , 'Denied Entry'\n      , 'see css'\n      , 'OTHER'\n      ],\n      servicedWithIssuesCodes: [\n        'Missing Chimney Cap'\n      , 'Missing Damper'\n      , 'Broken Damper - Other'\n      , 'Broken Damper - stays open'\n      , 'Broken Damper - closed/won\\'t open'\n      , 'Broken Damper - Not Connected'\n      , 'Missing Spark Screen'\n      , 'Damaged Spark Screen'\n      , 'Damaged Left Refractory Panel'\n      , 'Damaged Back Refractory Panel'\n      , 'Damaged Right Refractory Panel'\n      , 'Damaged Base Panel'\n      , 'Missing Left Refractory Panel'\n      , 'Missing Back Refractory Panel'\n      , 'Missing Right Refractory Panel'\n      , 'Missing Base Panel'\n      , 'see  css'\n      , 'Went Back'\n      ],\n      servicedNoIssuesCodes: [\n        `Completed. No Issues.`\n      ],\n    }\n    setUnitCodes(this)\n  }\n\n  updateOtherDesc = evt => {\n    this.setState({\n      otherDesc: evt.target.value,\n      showOtherModal: false,\n    })\n  }\n  closeOtherModal = evt => {\n    this.setState({ showOtherModal: false })\n  }\n  addCodes = _ => {\n    const { unitName, chosenCodes, otherDesc } = this.state\n    if (unitName && chosenCodes.length) {\n      if (chosenCodes.includes('Went Back')) {\n        getOldRecords(this)\n        .then(r => {\n          if(!r.errors) {\n            deleteOldRecord(R.head(r.data.unitCodes))\n          } else {\n            console.log(r.errors)\n          }\n        })\n        .then(r => saveCodes(this))\n      } else if (chosenCodes.includes(`OTHER`)) {\n        this.setState(_ => ({\n          chosenCodes: chosenCodes.map(cc => {\n            if (cc === `OTHER`) return `OTHER ${otherDesc}`\n            return cc\n          })\n        }), () => saveCodes(this))\n      } else if (chosenCodes.includes(`Broken Damper - Other`)) {\n        this.setState(state => ({\n          chosenCodes: chosenCodes.map(cc => {\n            if (cc === `Broken Damper - Other`) return `Broken Damper - Other ${otherDesc}`\n            return cc\n          })\n        }), () => saveCodes(this))\n      } else {\n        saveCodes(this)\n      }\n    }\n  }\n\n  render() {\n    const { state } = this\n\n    return (\n      <div>\n        {\n          !state.deviceId &&\n            <div>\n              <input\n                name=\"username\"\n                placeholder=\"User Name\"\n                style={{width: '100%', padding: '20px', boxSizing: 'border-box'}}\n                value={state.userName}\n                onChange={evt => updateUserName(this, evt)}\n                type=\"text\"\n              />\n              <SaveButton onClick={evt => saveUserName(this)}>Save User Name</SaveButton>\n            </div>\n        }\n        {\n          !state.jobName &&\n            <div>\n              <input\n                name=\"jobname\"\n                placeholder=\"Property Name\"\n                style={{width: '100%', padding: '20px', boxSizing: 'border-box'}}\n                value={state.job}\n                onChange={evt => updateJobName(this, evt)}\n                type=\"text\"\n              />\n              <SaveJobButton onClick={evt => saveJobName(this)}>Start new property</SaveJobButton>\n            </div>\n        }\n        <input name=\"unit\" placeholder=\"Unit\" style={{width: '100%', padding: '20px', boxSizing: 'border-box'}} value={state.unitName} onChange={evt => addUnitName(this, evt)} type=\"text\" />\n        {\n          state.servicedWithIssuesCodes.map((x, i) =>\n            <CodeButton\n              state={state}\n              code={x}\n              key={x}\n              onClick={evt => addCode(this, x)}\n            >\n              {x}\n            </CodeButton>)\n        }\n        <br />\n        {\n          state.servicedNoIssuesCodes.map((x, i) =>\n            <CodeButton\n              state={state}\n              code={x}\n              key={x}\n              onClick={evt => addCode(this, x)}\n            >\n              {x}\n            </CodeButton>)\n        }\n        <br />\n        <br />\n        {\n          state.unServicedCodes.map((x, i) =>\n            <CodeButton\n              state={state}\n              code={x}\n              key={x}\n              onClick={evt => addCode(this, x)}\n            >\n              {x}\n            </CodeButton>)\n        }\n        <AddCodesButton onClick={this.addCodes}>Add Codes</AddCodesButton>\n        <ul id=\"report\" style={{\n          listStyleType: 'none'\n        }}>\n        {\n          state.unitCodes.map((x, i) => <li key={i}>\n              {x}<button onClick={evt => redoCode(this, x, i)}>Redo</button>\n              </li>)\n        }\n        </ul>\n        { !!this.state.jobName &&<EndJobButton onClick={evt => endJob(this)}>End Property</EndJobButton>}\n        <h4>Reports By User/type</h4>\n        {\n          Object.keys(R.groupBy(R.prop('deviceId'), this.state.allUnitCodes))\n            .map((x, i) =>\n              (<div key={i}>\n                <button onClick={evt => downloadServiceNoIssuesUnitCodes(this, x)}>{`${x} (Completed. No Issues)`}</button>\n                <button onClick={evt => downloadServiceWithIssuesUnitCodes(this, x)}>{`${x} (Completed with issues)`}</button>\n                <button onClick={evt => downloadUnservicedUnitCodesFromDevice(this, x)}>{`${x} (NA)`}</button>\n                <button onClick={evt => downloadAllUnitCodesFromDevice(this, x)}>{`All`}</button>\n              </div>)\n            )\n        }\n        <h4>Property Reports</h4>\n        {\n          utils.sortedJobNames(this.state.allUnitCodes).map(jobName => {\n            return <button key={jobName} onClick={_ => downloadPerJob(this, jobName)}>{jobName}</button>\n          })\n        }\n        <Modal\n          open={state.showOtherModal}\n          close={evt => this.setState({showOtherModal: false})}\n        >\n          <h4>Add description</h4>\n          <input type=\"text\" value={this.otherDesc} onBlur={this.updateOtherDesc} />\n          <button onClick={evt => this.setState({showOtherModal: false})}>Save</button>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}